import asyncio
import logging
from datetime import datetime, timedelta
from functools import wraps
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
import sqlite3
import matplotlib.pyplot as plt
import io
import shutil
import re
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

log_filename = 'bot.log'
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("bot")
hdlr = logging.FileHandler(log_filename, mode='a', encoding='utf-8')
hdlr.setFormatter(logging.Formatter("%(asctime)s %(funcName)s %(levelname)s %(message)s"))
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
scheduler = AsyncIOScheduler()

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –¥–∞–Ω–∏—Ö
DB_FILE = 'bot_data.db'

# ID —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
SUPERADMIN_ID = int(os.getenv("SUPERADMIN_ID"))


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS channels
                 (id INTEGER PRIMARY KEY, channel_id INTEGER, expiry_date TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS filters
                 (id INTEGER PRIMARY KEY, channel_id INTEGER, filter_type TEXT, filter_value TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS admins
                 (user_id INTEGER PRIMARY KEY, role TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS main_channels
                 (channel_id INTEGER PRIMARY KEY)''')
    c.execute('''CREATE TABLE IF NOT EXISTS spam_settings
                 (id INTEGER PRIMARY KEY, max_messages INTEGER, time_window INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS analytics
                 (date TEXT, action TEXT, count INTEGER, UNIQUE(date,action))''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def execute_db(query, params=()):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute(query, params)
    conn.commit()
    result = c.fetchall()
    conn.close()
    return result

def get_channels():
    channels = execute_db("SELECT * FROM channels")
    return {channel[1]: {'id': channel[0], 'expiry_date': channel[2]} for channel in channels}

def get_filters():
    filters = execute_db("SELECT * FROM filters")
    return filters

def get_admins():
    admins = execute_db("SELECT * FROM admins")
    admin_dict = {str(admin[0]): admin[1] for admin in admins}
    if str(SUPERADMIN_ID) not in admin_dict:
        execute_db("INSERT OR REPLACE INTO admins (user_id, role) VALUES (?, ?)", (SUPERADMIN_ID, 'superadmin'))
        admin_dict[str(SUPERADMIN_ID)] = 'superadmin'
    return admin_dict

def get_main_channels():
    main_channels = execute_db("SELECT * FROM main_channels")
    return {str(channel[0]): True for channel in main_channels}

def get_spam_settings():
    settings = execute_db("SELECT * FROM spam_settings")
    return settings[0] if settings else None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
def admin_required(func):
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        admins = get_admins()
        if str(user_id) not in admins:
            await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

def superadmin_required(func):
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id != SUPERADMIN_ID:
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞–Ω–∞–ª–∞–º–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
def add_channel(channel_id, days):
    expiry_date = (datetime.now() + timedelta(days=days)).isoformat()
    execute_db("INSERT INTO channels (channel_id, expiry_date) VALUES (?, ?)", (channel_id, expiry_date))

def remove_channel(channel_id):
    execute_db("DELETE FROM channels WHERE channel_id = ?", (channel_id,))
    execute_db("DELETE FROM filters WHERE channel_id = ?", (channel_id,))

def add_filter(channel_id, filter_type, filter_value):
    execute_db("INSERT INTO filters (channel_id, filter_type, filter_value) VALUES (?, ?, ?)",
               (channel_id, filter_type, filter_value))

def remove_filter(filter_id):
    execute_db("DELETE FROM filters WHERE id = ?", (filter_id,))

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
def add_admin(user_id, role='admin'):
    execute_db("INSERT OR REPLACE INTO admins (user_id, role) VALUES (?, ?)", (user_id, role))

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
def add_main_channel(channel_id):
    execute_db("INSERT OR REPLACE INTO main_channels (channel_id) VALUES (?)", (channel_id,))

def remove_main_channel(channel_id):
    execute_db("DELETE FROM main_channels WHERE channel_id = ?", (channel_id,))

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ —Å–ø–∞–º—É
def set_spam_settings(max_messages, time_window):
    execute_db("INSERT OR REPLACE INTO spam_settings (id, max_messages, time_window) VALUES (1, ?, ?)",
               (max_messages, time_window))

def is_spam(user_id):
    # –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–∞–º—É
    return False

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é
def log_action(action):
    date = datetime.now().strftime('%Y-%m-%d')
    execute_db("INSERT INTO analytics (date, action, count) VALUES (?, ?, 1) ON CONFLICT(date, action) DO UPDATE SET count = count + 1",
               (date, action))

def get_analytics():
    return execute_db("SELECT * FROM analytics ORDER BY date DESC LIMIT 30")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
def get_admin_keyboard() -> ReplyKeyboardMarkup:
    keyboard = []
    keyboard.append([KeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")])
    keyboard.append([KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª"), KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")])
    keyboard.append([KeyboardButton(text="üè∑ –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä"), KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä")])
    keyboard.append([KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")])
    keyboard.append([KeyboardButton(text="üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")])
    keyboard.append([KeyboardButton(text="üìã –î–æ–ø–æ–º–æ–≥–∞")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
@admin_required
async def start(message: types.Message):
    keyboard = get_admin_keyboard()
    await message.reply("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.", reply_markup=keyboard)
    log_action("start")

@dp.message(Command("help"))
@admin_required
async def help_command(message: types.Message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
    /start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
    /help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    /add_channel channel_id days - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª
    /remove_channel channel_id - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª
    /list_channels - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
    /add_filter channel_id filter_type filter_value - –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–æ –∫–∞–Ω–∞–ª—É
    /remove_filter filter_id - –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
    /list_filters - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    /set_admin user_id role - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞)
    /list_admins - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    /add_main_channel channel_id - –î–æ–¥–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞)
    /remove_main_channel channel_id - –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞)
    /list_main_channels - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
    /set_spam_settings max_messages time_window - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞)
    /get_spam_settings - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É
    /get_logs - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞)
    /analytics - –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
    """
    await message.reply(help_text)
    log_action("help")

@dp.message(lambda message: message.text == "üìä –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
@admin_required
async def list_channels_button(message: types.Message):
    channels = get_channels()
    if channels:
        channel_list = "\n".join([f"{channel_id}: –¥–æ {info['expiry_date']}" for channel_id, info in channels.items()])
        await message.reply(f"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤:\n{channel_list}")
    else:
        await message.reply("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    log_action("list_channels")

@dp.message(lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")
@admin_required
async def add_channel_button(message: types.Message):
    await message.reply("–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/add_channel channel_id days")

@dp.message(lambda message: message.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª")
@admin_required
async def remove_channel_button(message: types.Message):
    await message.reply("–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/remove_channel channel_id")

@dp.message(lambda message: message.text == "üè∑ –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä")
@admin_required
async def add_filter_button(message: types.Message):
    await message.reply("–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/add_filter channel_id filter_type filter_value (filter_type = tag, word, phrase, combination)")

@dp.message(lambda message: message.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä")
@admin_required
async def remove_filter_button(message: types.Message):
    await message.reply("–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/remove_filter filter_id")

@dp.message(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
@admin_required
async def list_admins_button(message: types.Message):
    admins = get_admins()
    if admins:
        admin_list = "\n".join([f"{user_id}: {role}" for user_id, role in admins.items()])
        await message.reply(f"–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n{admin_list}")
    else:
        await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    log_action("list_admins")

@dp.message(lambda message: message.text == "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
@admin_required
async def analytics_button(message: types.Message):
    await analytics_command(message)

@dp.message(lambda message: message.text == "üìã –î–æ–ø–æ–º–æ–≥–∞")
@admin_required
async def help_button(message: types.Message):
    await help_command(message)

@dp.message(Command("add_channel"))
@admin_required
async def add_channel_command(message: types.Message):
    try:
        _, channel_id, days = message.text.split()
        add_channel(int(channel_id), int(days))
        await message.reply(f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –¥–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("add_channel")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_channel channel_id days")

@dp.message(Command("remove_channel"))
@admin_required
async def remove_channel_command(message: types.Message):
    try:
        _, channel_id = message.text.split()
        remove_channel(int(channel_id))
        await message.reply(f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("remove_channel")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_channel channel_id")

@dp.message(Command("add_filter"))
@admin_required
async def add_filter_command(message: types.Message):
    try:
        _, channel_id, filter_type, *filter_value = message.text.split()
        filter_value = ' '.join(filter_value)
        add_filter(int(channel_id), filter_type, filter_value)
        await message.reply(f"–§—ñ–ª—å—Ç—Ä {filter_type}: {filter_value} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É {channel_id}.")
        logger.info(f"–§—ñ–ª—å—Ç—Ä {filter_type}: {filter_value} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É {channel_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("add_filter")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_filter channel_id filter_type filter_value")

@dp.message(Command("remove_filter"))
@admin_required
async def remove_filter_command(message: types.Message):
    try:
        _, filter_id = message.text.split()
        remove_filter(int(filter_id))
        await message.reply(f"–§—ñ–ª—å—Ç—Ä {filter_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logger.info(f"–§—ñ–ª—å—Ç—Ä {filter_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("remove_filter")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_filter filter_id")

@dp.message(Command("list_filters"))
@admin_required
async def list_filters_command(message: types.Message):
    filters = get_filters()
    if filters:
        filter_list = "\n".join([f"ID: {f[0]}, –ö–∞–Ω–∞–ª: {f[1]}, –¢–∏–ø: {f[2]}, –ó–Ω–∞—á–µ–Ω–Ω—è: {f[3]}" for f in filters])
        await message.reply(f"–°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤:\n{filter_list}")
    else:
        await message.reply("–°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    log_action("list_filters")

@dp.message(Command("set_admin"))
@superadmin_required
async def set_admin_command(message: types.Message):
    try:
        _, user_id, role = message.text.split()
        add_admin(int(user_id), role)
        await message.reply(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑ —Ä–æ–ª–ª—é {role} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
        logger.info(f"–î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∑ —Ä–æ–ª–ª—é {role}")
        log_action("set_admin")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /set_admin user_id role")

@dp.message(Command("backup"))
@superadmin_required
async def backup_command(message: types.Message):
    return
    try:
        backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        shutil.make_archive(backup_filename[:-4], 'zip', root_dir='.', base_dir='.')
        
        await message.reply_document(FSInputFile(backup_filename))
        
        os.remove(backup_filename)
        
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("backup")
    except Exception as e:
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {str(e)}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {str(e)}")

@dp.message(Command("restore"))
@superadmin_required
async def restore_command(message: types.Message):
    return
    if not message.reply_to_message or not message.reply_to_message.document:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó.")
        return

    try:
        file = await bot.get_file(message.reply_to_message.document.file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "restore.zip")

        shutil.unpack_archive("restore.zip", ".")

        os.remove("restore.zip")

        await message.reply("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó.")
        logger.info(f"–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("restore")
    except Exception as e:
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")

@dp.message(Command("add_main_channel"))
@superadmin_required
async def add_main_channel_command(message: types.Message):
    try:
        _, channel_id = message.text.split()
        add_main_channel(int(channel_id))
        await message.reply(f"–û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª {channel_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
        logger.info(f"–î–æ–¥–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª {channel_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("add_main_channel")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_main_channel channel_id")

@dp.message(Command("remove_main_channel"))
@superadmin_required
async def remove_main_channel_command(message: types.Message):
    try:
        _, channel_id = message.text.split()
        remove_main_channel(int(channel_id))
        await message.reply(f"–û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª {channel_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª {channel_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("remove_main_channel")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_main_channel channel_id")

@dp.message(Command("list_main_channels"))
@admin_required
async def list_main_channels_command(message: types.Message):
    main_channels = get_main_channels()
    if main_channels:
        channel_list = "\n".join(main_channels.keys())
        await message.reply(f"–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤:\n{channel_list}")
    else:
        await message.reply("–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    log_action("list_main_channels")

@dp.message(Command("set_spam_settings"))
@superadmin_required
async def set_spam_settings_command(message: types.Message):
    try:
        _, max_messages, time_window = message.text.split()
        set_spam_settings(int(max_messages), int(time_window))
        await message.reply(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ: {max_messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ {time_window} —Å–µ–∫—É–Ω–¥.")
        logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id}")
        log_action("set_spam_settings")
    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /set_spam_settings max_messages time_window")

@dp.message(Command("get_spam_settings"))
@admin_required
async def get_spam_settings_command(message: types.Message):
    spam_settings = get_spam_settings()
    if spam_settings:
        await message.reply(f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É: {spam_settings[1]} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ {spam_settings[2]} —Å–µ–∫—É–Ω–¥.")
    else:
        await message.reply("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
    log_action("get_spam_settings")

@dp.message(Command("get_logs"))
@superadmin_required
async def get_logs_command(message: types.Message):
    try:
        await message.reply_document(FSInputFile(log_filename))
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª –ª–æ–≥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        log_action("get_logs")
    except Exception as e:
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤: {str(e)}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤: {str(e)}")

@dp.message(Command("analytics"))
@admin_required
async def analytics_command(message: types.Message):
    try:
        data = get_analytics()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
        plt.figure(figsize=(10, 6))
        actions = list(set([row[1] for row in data]))
        for action in actions:
            action_data = [row for row in data if row[1] == action]
            dates = [datetime.strptime(row[0], '%Y-%m-%d').date() for row in action_data]
            counts = [row[2] for row in action_data]
            plt.plot(dates, counts, label=action)

        plt.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π")
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —É –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        await message.reply_photo(types.BufferedInputFile(buf.getvalue(), filename="analytics.png"))
        
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
        log_action("analytics")
    except Exception as e:
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {str(e)}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {str(e)}")

@dp.channel_post()
async def forward_message(message: types.Message):
    """–ü–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–∞–Ω–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤."""

    main_channels = get_main_channels()
    
    if str(message.chat.id) not in main_channels:
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤

    user_id = message.from_user.id if message.from_user else None
    
    if user_id and is_spam(user_id):
        #await message.reply("–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logger.warning(f"Spam detected from user {user_id}")
        return

    text = message.text or message.caption or ""
    current_time = datetime.now()

    channels = get_channels()
    filters = get_filters()

    for channel_id, info in list(channels.items()):
        if datetime.fromisoformat(info['expiry_date']) < current_time:
            remove_channel(channel_id)
            await notify_admins(f"–ö–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó.")
            continue

        channel_filters = [f for f in filters if f[1] == channel_id]
        should_forward = False

        for filter_id, _, filter_type, filter_value in channel_filters:
            if filter_type == 'tag':
                if filter_value.lower() in text.lower():
                    should_forward = True
                    break
            elif filter_type == 'word':
                if re.search(r'\b' + re.escape(filter_value.lower()) + r'\b', text.lower()):
                    should_forward = True
                    break
            elif filter_type == 'phrase':
                if filter_value.lower() in text.lower():
                    should_forward = True
                    break
            elif filter_type == 'combination':
                elements = filter_value.split('&')
                if all(element.strip().lower() in text.lower() for element in elements):
                    should_forward = True
                    break

        if should_forward:
            try:
                await message.forward(chat_id=channel_id)
                logger.info(f"Message forwarded to channel {channel_id}")
                log_action("forward_message")
            except Exception as e:
                logger.error(f"Error forwarding message to channel {channel_id}: {e}")
                await notify_admins(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É {channel_id}: {e}")

async def notify_admins(message: str):
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    admins = get_admins()
    for admin_id in admins:
        try:
            await bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

async def check_expired_channels():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤–∏–¥–∞–ª—è—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∫–∞–Ω–∞–ª–∏."""
    logger.info(f"start check_expired_channels")
    channels = get_channels()
    current_time = datetime.now()
    for channel_id, info in list(channels.items()):
        if datetime.fromisoformat(info['expiry_date']) < current_time:
            remove_channel(channel_id)
            await notify_admins(f"–ö–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó.")


# –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á
scheduler.add_job(check_expired_channels, 'interval', hours=1)


async def main():
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler.start()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())